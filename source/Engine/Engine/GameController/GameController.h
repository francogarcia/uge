/*
  * (c) Copyright 2014 Franco Eusébio Garcia
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser GPL v3
  * as published by the Free Software Foundation.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See 
  * http://www.gnu.org/licenses/lgpl-3.0.txt for more details.
  *
  * You should have received a copy of the GNU Lesser GPL v3
  * along with this program; if not, write to the Free Software
  */

#pragma once

#include <Core/EntityComponent/Entity/ActorTypes.h>

#include <IO/Input/InputDevice/IInputDevice.h>
#include <IO/Input/InputMapping/InputMapper.h>
#include <IO/Input/InputMapping/RawInputConstantsParser.h>

namespace uge
{
    class GameController;
    typedef std::shared_ptr<GameController> GameControllerSharedPointer;

    namespace InputMapping
    {
        // This enum should be defined by the game.
        // It should all action buttons which will be used during gameplay.
        // Action are performed when the button is pressed.
        // If it is hold, it is not repeated.
        extern enum class Action : unsigned int;
        
        // This enum should be defined by the game.
        // It should list all state buttons which will be used during gameplay.
        // States are actions which have a state (for instance, enabled / disabled).
        // The action is performed continously until the the button is released.
        extern enum class State : unsigned int;
        
        // This enum should be defined by the game.
        // It should list all range buttons which will be used during gameplay.        
        // Range values are generated by analagous devices. It is usually mapped between a
        // maximun and a minimum value.
        extern enum class Range : unsigned int;
    }

    class GameController
    {
    public:
        struct MappedInputDelegate
        {
            InputMapping::InputCallback callback;
            int priority;
        };

        GameController();

        ~GameController();

        virtual bool vInit();
        virtual bool vDestroy();

        virtual bool vUpdate(unsigned long timeElapsed);

        void AddInputDevice(InputDevice::IInputDevice* pInputDevice);
        void RemoveInputDevice(InputDevice::IInputDevice* pInputDevice);

        void AddMappedInputCallback(InputMapping::InputCallback callback, int priority);
        void AddInputContext(const std::string& inputContextFilename);

        void SetControlledActorID(ActorID actorID);

    protected:

        virtual const std::string vGetInputContextListFilename() = 0;
        virtual const InputMapping::RawInputToInputTypeCallbacks vGetInputConverterDelegates() = 0;
        virtual const std::vector<std::string> vGetInputContexts() = 0;
        virtual std::vector<MappedInputDelegate> vGetMappedInputDelegates() = 0;

    protected:
        InputMapping::InputMapper m_InputMapper;
        InputDevice::InputDeviceList m_Devices;

        ActorID m_ActorID;
    };
}
